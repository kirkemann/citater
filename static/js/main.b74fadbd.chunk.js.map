{"version":3,"sources":["citat.js","addcitat.js","App.js","serviceWorker.js","index.js"],"names":["Citat","citats","deleteCitat","citatList","map","c","forfatter","className","key","id","Overskrift","Citattekst","Forfatter","onClick","class","addcitat","state","handleChanges","e","setState","target","value","handleSubmit","preventDefault","props","addCitat","onSubmit","this","htmlFor","type","onChange","Component","App","Citats","citat","Math","random","window","confirm","filter","console","log","prevProps","prevState","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8PAuCeA,G,KApCD,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,YAEdC,EAAYF,EAAOG,KAAI,SAAAC,GAEzB,MAAoB,UAAhBA,EAAEC,UAGE,yBAAKC,UAAU,eAAeC,IAAKH,EAAEI,IAEjC,yBAAKF,UAAU,OAEX,4CAAmBF,EAAEK,YACrB,4CAAmBL,EAAEM,YACrB,4CAAmBN,EAAEO,WACrB,4BAAQL,UAAU,6CAA6CM,QAAS,WAAOX,EAAaG,EAAEI,MAAM,uBAAGK,MAAM,wBAAT,kBAApG,gBAOL,QAOnB,MAAO,CACH,yBAAKP,UAAU,kBAETJ,M,OCYKY,E,2MAzCXC,MAAQ,CACJN,WAAY,KACZC,WAAY,KACZC,UAAW,M,EAGfK,cAAgB,SAACC,GACb,EAAKC,SAAL,eACKD,EAAEE,OAAOX,GAAKS,EAAEE,OAAOC,S,EAIhCC,aAAe,SAACJ,GACZA,EAAEK,iBACF,EAAKC,MAAMC,SAAS,EAAKT,Q,wEAIzB,OACI,6BAEY,0BAAMT,UAAU,oBAAmBmB,SAAUC,KAAKL,cAE9C,2BAAOf,UAAU,oBAAmBqB,QAAQ,cAA5C,eACA,2BAAOrB,UAAU,oBAAmBsB,KAAK,OAAOpB,GAAG,aAAaqB,SAAUH,KAAKV,gBAE/E,2BAAOV,UAAU,oBAAmBqB,QAAQ,aAA5C,cACA,2BAAOrB,UAAU,oBAAmBsB,KAAK,OAAOpB,GAAG,aAAaqB,SAAUH,KAAKV,gBAE/E,2BAAOV,UAAU,oBAAmBqB,QAAQ,aAA5C,gBACA,2BAAOrB,UAAU,oBAAmBsB,KAAK,OAAOpB,GAAG,YAAYqB,SAAUH,KAAKV,gBAE9E,4BAAQV,UAAU,oDAAmD,uBAAGO,MAAM,mCAAT,OAArE,mB,GAlCLiB,aCwDRC,E,2MArDbhB,MAAQ,CACNiB,OAAS,CACP,CAAEvB,WAAY,aAAcC,WAAY,8BAA+BC,UAAW,QAASH,GAAI,GAC/F,CAAEC,WAAY,aAAcC,WAAY,8BAA+BC,UAAW,QAASH,GAAI,GAC/F,CAAEC,WAAY,aAAcC,WAAY,8BAA+BC,UAAW,QAASH,GAAI,GAC/F,CAAEC,WAAY,aAAcC,WAAY,8BAA+BC,UAAW,QAASH,GAAI,GAC/F,CAAEC,WAAY,aAAcC,WAAY,8BAA+BC,UAAW,QAASH,GAAI,K,EAInGgB,SAAW,SAACS,GACVA,EAAMzB,GAAK0B,KAAKC,SAChB,IAAInC,EAAM,sBAAO,EAAKe,MAAMiB,QAAlB,CAA0BC,IACpC,EAAKf,SAAS,CACZc,OAAQhC,K,EAIZC,YAAc,SAACO,GAGb,IAAmB,IAFD4B,OAAOC,QAAQ,uCAET,CACtB,IAAIrC,EAAQ,EAAKe,MAAMiB,OAAOM,QAAO,SAAAL,GACnC,OAAOA,EAAMzB,KAAOA,KAEtB,EAAKU,SAAS,CACZc,OAAQhC,M,mFAKZuC,QAAQC,IAAI,wB,yCAGKC,EAAWC,GAC5BH,QAAQC,IAAI,sBACZD,QAAQC,IAAIC,EAAWC,K,+BAKvB,OACE,yBAAKpC,UAAU,iBACb,wBAAIA,UAAU,+BAAd,kBACA,uBAAGA,UAAU,WAAb,wCAEA,kBAAC,EAAD,CAAOL,YAAayB,KAAKzB,YAAaD,OAAQ0B,KAAKX,MAAMiB,SACzD,kBAAC,EAAD,CAAUR,SAAUE,KAAKF,gB,GAjDfM,aCQEa,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b74fadbd.chunk.js","sourcesContent":["import React from 'react';\r\nimport './citat.css'\r\n\r\nconst Citat = ({citats, deleteCitat}) => {\r\n\r\n    const citatList = citats.map(c => {\r\n\r\n        if (c.forfatter !== 'Frank'){\r\n\r\n            return (\r\n                <div className=\"citat col s6\" key={c.id}>\r\n                   \r\n                    <div className=\"box\">\r\n                        \r\n                        <div>Overskrift: { c.Overskrift }</div>\r\n                        <div>Citattekst: { c.Citattekst }</div>\r\n                        <div>Forfatter:  { c.Forfatter }</div>\r\n                        <button className=\"center waves-effect orange waves-light btn\" onClick={() => {deleteCitat (c.id)}}><i class=\"material-icons right\">delete_forever</i>Slet Citat</button>\r\n                    </div>\r\n                    \r\n                </div>\r\n            )\r\n\r\n        } else {\r\n            return null\r\n        }\r\n})\r\n\r\n\r\n\r\n\r\nreturn [\r\n    <div className=\"citat-list row\">\r\n       \r\n        { citatList }\r\n               \r\n    </div>\r\n]\r\n}\r\nexport default Citat\r\n","import React, { Component } from 'react'\r\nimport './citat.css'\r\n\r\nclass addcitat extends Component {\r\n\r\n    state = {\r\n        Overskrift: null,\r\n        Citattekst: null,\r\n        Forfatter: null\r\n    }\r\n\r\n    handleChanges = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addCitat(this.state);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                \r\n                        <form className=\"center black-text\"onSubmit={this.handleSubmit}>\r\n\r\n                            <label className=\"center black-text\"htmlFor=\"overskrift\">Overskrift:</label>\r\n                            <input className=\"center black-text\"type=\"text\" id=\"Overskrift\" onChange={this.handleChanges}/>\r\n\r\n                            <label className=\"center black-text\"htmlFor=\"citattekt\">Citattekt:</label>\r\n                            <input className=\"center black-text\"type=\"text\" id=\"Citattekst\" onChange={this.handleChanges}/>\r\n\r\n                            <label className=\"center black-text\"htmlFor=\"forfatter\"> Forfatter: </label>\r\n                            <input className=\"center black-text\"type=\"text\" id=\"Forfatter\" onChange={this.handleChanges}/>\r\n\r\n                            <button className=\"center waves-effect orange waves-light btn pulse\"><i class=\"material-icons white-text right\">add</i>Opret her</button>\r\n\r\n                        </form>\r\n                    \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default addcitat\r\n","import React, { Component } from 'react';\nimport Citat from './citat';\nimport Addcitat from './addcitat';\n\nclass App extends Component {\n\n  state = {\n    Citats : [\n      { Overskrift: 'Her er jeg', Citattekst: 'Lorem ipsum dolor sit amet.', Forfatter: 'Frank', id: 1 },\n      { Overskrift: 'Her er jeg', Citattekst: 'Lorem ipsum dolor sit amet.', Forfatter: 'Frank', id: 2 },\n      { Overskrift: 'Her er jeg', Citattekst: 'Lorem ipsum dolor sit amet.', Forfatter: 'Frank', id: 3 },\n      { Overskrift: 'Her er jeg', Citattekst: 'Lorem ipsum dolor sit amet.', Forfatter: 'Frank', id: 4 },\n      { Overskrift: 'Her er jeg', Citattekst: 'Lorem ipsum dolor sit amet.', Forfatter: 'Frank', id: 5 }\n    ]\n  }\n\n  addCitat = (citat) => {\n    citat.id = Math.random();\n    let citats = [...this.state.Citats, citat];\n    this.setState({\n      Citats: citats\n    })\n  }\n\n  deleteCitat = (id) => {\n    let skalslettes = window.confirm(\"Vil du virkelig slette dette Guld??\");\n\n    if(skalslettes === true){\n      let citats= this.state.Citats.filter(citat => {\n        return citat.id !== id\n      });\n      this.setState({\n        Citats: citats\n      })\n    }\n  }\n  componentDidMount(){\n    console.log('componenet mounted');\n    \n  }\n  componentDidUpdate(prevProps, prevState){\n    console.log('componenet updated');\n    console.log(prevProps, prevState);\n    \n    \n  }\n  render() {\n    return (\n      <div className=\"App container\">\n        <h1 className=\"center orange-text darken-2\">Min citat side</h1>\n        <p className=\"center \">Du skal bare tilf√∏j dit Citat ;-)</p>\n\n        <Citat deleteCitat={this.deleteCitat} citats={this.state.Citats} />\n        <Addcitat addCitat={this.addCitat} />\n      </div>\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}